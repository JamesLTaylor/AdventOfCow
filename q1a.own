; To run from here the memory needs to be initialized to a zero, then the elements of the input,
; and then the target number (2020). The memory pointer is at the target number.

; Collect the target number and move it far to the right for later use
reg zer mp+ mp+ mp+ mp+ mp+ mp+ mp+ mp+ mp+     reg
        mp- mp- mp- mp- mp- mp- mp- mp- mp- mp-

; Find out how many elements there are in memory by counting back to a zero
for
    reg mp+ mp+ reg      ; shift current number 2 to right
    mp- reg mp- reg mv+  ; shift count 1 to left
    mp-                  ; point to next number
end
mp+ dbg ; print the number of non zero elements found

; now put all the numbers back in their original places carrying the count to the right
mp+ mp+
for
  mp- mp- reg mp+ reg  ; move the count to the right
  mp+ reg mp- mp- reg  ; move the number to the left
  mp+ mp+ mp+
end

mp- zer
; memory is 0, n, ..., n,n,count,*0*,0

; loop down from the count and collect the number that far to the left each time
; need to mark a zero for the return trip
mp- reg mp+ mp+ mp+ reg ; pick up the count and put it somewhere to loop down from
; memory is n,n,n,count,0,0,*loop1*

for ; Outer loop
    reg mp- mp- mp- reg ; ...n,n,n,*loop*,0,0,loop1

    ;START FETCH NUMBER ROUTINE
    for ; now run back and fetch the number
        mp- reg mp+ mp+ reg
        mp- reg mp- reg mv-
    end
    ; ...n,*0*,garbage,n...
    mp+ mp+ reg mp- mp- reg
    mp+ mp+
    for ; go forward until the zero. ...n,x,garbage,*n*...
        mp- mp- reg mp+ reg
        mp+ reg mp- mp- reg
        mp+ mp+ mp+
    end
    ;END FETCH NUMBER ROUTINE

    ; memory should be ...n,n,n,x,garbage,*0*,loop1
    mp- mp- reg zer dbg reg dbg reg zer dbg mp+ zer mp+ mp+ mp+ mp+ reg mp- mp-; print the collected number
    ; memory should be ...n,n,n,0,0,0,*loop1*,loop2,x

    reg mp+ reg mv-
    for ; Inner loop
        reg mp- mp- mp- mp- reg

        ;START FETCH NUMBER ROUTINE
        for ; now run back and fetch the number
            mp- reg mp+ mp+ reg
            mp- reg mp- reg mv-
        end
        ; ...n,*0*,garbage,n...
        mp+ mp+ reg mp- mp- reg
        mp+ mp+
        for ; go forward until the zero. ...n,x,garbage,*n*...
            mp- mp- reg mp+ reg
            mp+ reg mp- mp- reg
            mp+ mp+ mp+
        end
        ;END FETCH NUMBER ROUTINE
        mp- mp- dbg reg zer mp+ zer mp+ mp+ mp+ mp+ mp+ reg mp- mp-;
        mv-

        ; Now add the two collected numbers
        ; mem should be ...,0,0,0,loop1,*loop2*,x1,x2,
        mp+ reg mp+ mp+ reg
        mp- reg mp+ mp+ reg
        ; ...n,0,0,0,loop1,loop2,x1,x2,x1,*x2*
        for
            mv- mp- mv+ mp+
        end
        ; memory should be ...n,0,0,0,loop1,loop2,x1,x2,x1+x2,*0*,2020
        mp- dbg mp- mp- mp-

        ; Now we can compare with the target value and move the two answers even further right if they
        ; are correct
        ; '1721|979|366|299|675|1456|0|0|0|6|*4*|1721|979|2700|0|2020|0|0|0|0|0'
        mp+ mp+ mp+ reg mp+ mp+ mp+ reg
        mp- reg mp+ mp+ reg

        for mv- mp- mv- mp+ end              ; dec both memory until mem2 = 0
        mv+ mp-                              ; inc mem2 and so that if they are both zero we get [0, 1]

        for                                  ; this branch runs if numbers are not equal
            zer mp+ zer mp-                      ; zero so that next branch does not run
        end
        mp+
        brk ;
        for                                  ; Will only run this if two values were equal
                                             ; Print the two numbers that will sum to 2020
        ; 0|0|6|4|1721|979|2700|0|2020|0|*0*|0|0|0|0|0|0|0|0|0|0
            zer
            mp- mp- mp- mp- mp-
            prn
            mp-
            prn
            mp+ mp+ mp+ mp+ mp+ mp+
        end
        mp- mp- mp- mp- mp- mp- mp-
    end
    mp-
    mv-
end